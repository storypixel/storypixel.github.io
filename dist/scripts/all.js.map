{"version":3,"sources":["home.js"],"names":["init","organizeThoughts","initProgressBar","last_known_scroll_position","ticking","className","sections","document","querySelectorAll","updateProgress","scroll_pos","scrolledPast","Array","from","filter","el","getBoundingClientRect","top","activeThoughtWrapper","length","topOfActive","getElementById","style","width","offsetHeight","window","addEventListener","e","scrollY","requestAnimationFrame","elements","forEach","i","thisClassName","classList","add","onload"],"mappings":";;AAAA;AAEE,SAASA,IAAT,GAAgB;AACZC;AACAC;AACH,C,CAED;;;AACA,SAASA,eAAT,GAA2B;AACzB,MAAIC,6BAA6B,CAAjC;AACA,MAAIC,UAAU,KAAd;AAEA,MAAIC,YAAY,iBAAhB;AACA,MAAIC,WAAWC,SAASC,gBAAT,CAA0B,kBAA1B,CAAf;;AAEA,WAASC,cAAT,CAAwBC,UAAxB,EAAoC;AAClC,QAAIC,eAAeC,MAAMC,IAAN,CAAWP,QAAX,EAAqBQ,MAArB,CAA4B,UAACC,EAAD,EAAQ;AAAEA,SAAGC,qBAAH,GAA2BC,GAA3B,IAAkC,CAAlC;AAAsC,KAA5E,CAAnB;AACA,QAAIC,uBAAuBP,aAAaA,aAAaQ,MAAb,GAAsB,CAAnC,CAA3B;;AACA,QAAID,oBAAJ,EAA0B;AAC1B,UAAIE,cAAeF,qBAAqBF,qBAArB,GAA6CC,GAAhE;AACAV,eAASc,cAAT,CAAwB,UAAxB,EAAoCC,KAApC,CAA0CC,KAA1C,GAAkD,MAAM,CAACH,WAAP,GAAmBF,qBAAqBM,YAAxC,GAAqD,IAAvG;AACC;AACF;;AAEDC,SAAOC,gBAAP,CAAwB,QAAxB,EAAkC,UAASC,CAAT,EAAY;AAC5CxB,iCAA6BsB,OAAOG,OAApC;;AAEA,QAAI,CAACxB,OAAL,EAAc;AACZqB,aAAOI,qBAAP,CAA6B,YAAW;AACtCpB,uBAAeN,0BAAf;AACAC,kBAAU,KAAV;AACD,OAHD;AAIAA,gBAAU,IAAV;AACD;AAEF,GAXD;AAYD,C,CAED;;;AACA,SAASH,gBAAT,GAA4B;AAC1B,MAAII,YAAY,SAAhB;AACA,MAAIyB,WAAWvB,SAASC,gBAAT,CAA0B,UAA1B,CAAf;AAEAsB,WAASC,OAAT,CAAiB,UAAShB,EAAT,EAAaiB,CAAb,EAAgB;AAC/B,QAAIC,gBAAgB5B,YAAY,GAAZ,GAAkB2B,CAAtC;AACA,QAAIjB,GAAGmB,SAAP,EAAkBnB,GAAGmB,SAAH,CAAaC,GAAb,CAAiBF,aAAjB,EAAlB,KACKlB,GAAGV,SAAH,IAAgB,MAAM4B,aAAtB;AACN,GAJD;AAKD;;AAEHR,OAAOW,MAAP,GAAgB,YAAW;AACrBpC;AACJ,CAFF","file":"all.js","sourcesContent":["// Wait until stuff loads\n\n  function init() {\n      organizeThoughts();\n      initProgressBar();\n  }\n\n  // Set up scrolling action\n  function initProgressBar() {\n    let last_known_scroll_position = 0;\n    let ticking = false;\n\n    let className = \"thought-wrapper\";\n    let sections = document.querySelectorAll(\".thought-wrapper\");\n\n    function updateProgress(scroll_pos) {\n      let scrolledPast = Array.from(sections).filter((el) => { el.getBoundingClientRect().top <= 0; });\n      let activeThoughtWrapper = scrolledPast[scrolledPast.length - 1]\n      if (activeThoughtWrapper) {\n      let topOfActive =  activeThoughtWrapper.getBoundingClientRect().top\n      document.getElementById('progress').style.width = 100 * -topOfActive/activeThoughtWrapper.offsetHeight+'vw';\n      } \n    }\n    \n    window.addEventListener('scroll', function(e) {\n      last_known_scroll_position = window.scrollY;\n\n      if (!ticking) {\n        window.requestAnimationFrame(function() {\n          updateProgress(last_known_scroll_position);\n          ticking = false;\n        });\n        ticking = true;\n      }\n      \n    });\n  }\n\n  // Put color classes on the .thought items. Color classes gen'd by SCSS\n  function organizeThoughts() {\n    let className = \"thought\";\n    let elements = document.querySelectorAll(\".thought\");\n\n    elements.forEach(function(el, i) {\n      let thisClassName = className + \"-\" + i;\n      if (el.classList) el.classList.add(thisClassName);\n      else el.className += \" \" + thisClassName;\n    });\n  }\n\nwindow.onload = function() {\n      init();\n }"]}