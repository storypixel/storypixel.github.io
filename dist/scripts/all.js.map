{"version":3,"sources":["home.js"],"names":["init","organizeThoughts","initScrollTasks","last_known_scroll_position","ticking","sections","document","querySelectorAll","thoughts","activeNodes","processActives","updateProgress","scroll_pos","scrolledPast","Array","from","filter","el","getBoundingClientRect","top","activeThoughtWrapper","length","topOfActive","getElementById","style","width","offsetHeight","watchThoughts","className","forEach","d","documentElement","offset","scrollTop","window","innerHeight","height","clientHeight","classList","add","addEventListener","e","scrollY","requestAnimationFrame","elements","i","thisClassName","onload"],"mappings":";;AAAA;AAEA,SAASA,IAAT,GAAgB;AACdC;AACAC;AACD,C,CAED;;;AACA,SAASA,eAAT,GAA2B;AACzB,MAAIC,6BAA6B,CAAjC;AACA,MAAIC,UAAU,KAAd;AAEA,MAAIC,WAAWC,SAASC,gBAAT,CAA0B,kBAA1B,CAAf;AACA,MAAIC,WAAWF,SAASC,gBAAT,CAA0B,UAA1B,CAAf;AACA,MAAIE,cAAc,EAAlB;;AAEA,WAASC,cAAT,GAA0B,CAEzB;;AAED,WAASC,cAAT,CAAwBC,UAAxB,EAAoC;AAClC,QAAIC,eAAeC,MAAMC,IAAN,CAAWV,QAAX,EAAqBW,MAArB,CAA4B,UAACC,EAAD,EAAQ;AACrD,aAAOA,GAAGC,qBAAH,GAA2BC,GAA3B,IAAkC,CAAzC;AACD,KAFkB,CAAnB;AAGA,QAAIC,uBAAuBP,aAAaA,aAAaQ,MAAb,GAAsB,CAAnC,CAA3B;;AACA,QAAID,oBAAJ,EAA0B;AACxB,UAAIE,cAAcF,qBAAqBF,qBAArB,GAA6CC,GAA/D;AACAb,eAASiB,cAAT,CAAwB,UAAxB,EAAoCC,KAApC,CAA0CC,KAA1C,GAAkD,MAAM,CAACH,WAAP,GAAqBF,qBAAqBM,YAA1C,GAAyD,IAA3G;AACD;AACF;;AAED,WAASC,aAAT,CAAuBf,UAAvB,EAAmC;AACjC,QAAIgB,YAAY,QAAhB;AACA,QAAIf,eAAeC,MAAMC,IAAN,CAAWP,QAAX,EAAqBqB,OAArB,CAA6B,UAACZ,EAAD,EAAQ;AACtD,UAAIa,IAAIxB,SAASyB,eAAjB;AACA,UAAIC,SAASF,EAAEG,SAAF,GAAcC,OAAOC,WAAlC;AACA,UAAIC,SAASN,EAAEJ,YAAf,CAHsD,CAKtD;AACA;AAEA;AACA;AACA;;AAEA,UAAIT,GAAGC,qBAAH,GAA2BC,GAA3B,IAAkCW,EAAEO,YAAF,GAAe,CAArD,EAAwD;AACtD;AACA,YAAIpB,GAAGqB,SAAP,EACErB,GAAGqB,SAAH,CAAaC,GAAb,CAAiBX,SAAjB,EADF,KAGEX,GAAGW,SAAH,IAAgB,MAAMA,SAAtB;AACD;AACF,KAnBgB,CAAnB;AAoBD;;AAEDM,SAAOM,gBAAP,CAAwB,QAAxB,EAAkC,UAAUC,CAAV,EAAa;AAC7CtC,iCAA6B+B,OAAOQ,OAApC;;AAEA,QAAI,CAACtC,OAAL,EAAc;AACZ8B,aAAOS,qBAAP,CAA6B,YAAY;AACvChC,uBAAeR,0BAAf;AACAwB,sBAAcxB,0BAAd;AACAC,kBAAU,KAAV;AACD,OAJD;AAKAA,gBAAU,IAAV;AACD;AACF,GAXD;AAaAuB,gBAAc,CAAd;AACD,C,CAED;;;AACA,SAAS1B,gBAAT,GAA4B;AAC1B,MAAI2B,YAAY,SAAhB;AACA,MAAIgB,WAAWtC,SAASC,gBAAT,CAA0B,UAA1B,CAAf;AAEAqC,WAASf,OAAT,CAAiB,UAAUZ,EAAV,EAAc4B,CAAd,EAAiB;AAChC,QAAIC,gBAAgBlB,YAAY,GAAZ,GAAkBiB,CAAtC;AACA,QAAI5B,GAAGqB,SAAP,EAAkBrB,GAAGqB,SAAH,CAAaC,GAAb,CAAiBO,aAAjB,EAAlB,KACK7B,GAAGW,SAAH,IAAgB,MAAMkB,aAAtB;AACN,GAJD;AAKD;;AAEDZ,OAAOa,MAAP,GAAgB,YAAY;AACxB/C;AACF,CAFF","file":"all.js","sourcesContent":["// Wait until stuff loads\n\nfunction init() {\n  organizeThoughts();\n  initScrollTasks();\n}\n\n// Set up scrolling action\nfunction initScrollTasks() {\n  let last_known_scroll_position = 0;\n  let ticking = false;\n\n  let sections = document.querySelectorAll(\".thought-wrapper\");\n  let thoughts = document.querySelectorAll(\".thought\");\n  var activeNodes = [];\n\n  function processActives() {\n    \n  }\n\n  function updateProgress(scroll_pos) {\n    let scrolledPast = Array.from(sections).filter((el) => {\n      return el.getBoundingClientRect().top <= 0;\n    });\n    let activeThoughtWrapper = scrolledPast[scrolledPast.length - 1]\n    if (activeThoughtWrapper) {\n      let topOfActive = activeThoughtWrapper.getBoundingClientRect().top\n      document.getElementById('progress').style.width = 100 * -topOfActive / activeThoughtWrapper.offsetHeight + 'vw';\n    }\n  }\n\n  function watchThoughts(scroll_pos) {\n    let className = \"active\"\n    let scrolledPast = Array.from(thoughts).forEach((el) => {\n      var d = document.documentElement;\n      var offset = d.scrollTop + window.innerHeight;\n      var height = d.offsetHeight;\n    \n      // console.log('offset = ' + offset);\n      // console.log('height = ' + height);\n    \n      // if (offset === height) {\n      //   console.log('At the bottom');\n      // }\n\n      if (el.getBoundingClientRect().top <= d.clientHeight/2) {\n        // console.log(\"this el has top less than 0\", el.getBoundingClientRect().bottom )\n        if (el.classList)\n          el.classList.add(className);\n        else\n          el.className += ' ' + className;\n        }\n      });\n  }\n\n  window.addEventListener('scroll', function (e) {\n    last_known_scroll_position = window.scrollY;\n\n    if (!ticking) {\n      window.requestAnimationFrame(function () {\n        updateProgress(last_known_scroll_position);\n        watchThoughts(last_known_scroll_position);\n        ticking = false;\n      });\n      ticking = true;\n    }\n  });\n\n  watchThoughts(0);\n}\n\n// Put color classes on the .thought items. Color classes gen'd by SCSS\nfunction organizeThoughts() {\n  let className = \"thought\";\n  let elements = document.querySelectorAll(\".thought\");\n\n  elements.forEach(function (el, i) {\n    let thisClassName = className + \"-\" + i;\n    if (el.classList) el.classList.add(thisClassName);\n    else el.className += \" \" + thisClassName;\n  });\n}\n\nwindow.onload = function () {\n    init();\n }"]}